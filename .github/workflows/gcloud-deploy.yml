on:
  push:
    branches:
      - main

name: Deploy and Slack Notification
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: amp-compatibility-server
    steps:
    - uses: actions/checkout@v2
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        credentials_file_path: /tmp/creds

    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Configure env files from secrets
      run: |
          echo "$ENV" | base64 -d > .env
          mkdir -p private
          echo "$SERVER_CA"  | base64 -d > private/server-ca.pem
          echo "$CLIENT_CRT" | base64 -d > private/client-cert.pem
          echo "$CLIENT_KEY" | base64 -d > private/client-key.pem
          echo "$GCP_SA_KEY" | base64 -d > private/gcp.json
      env:
        ENV: ${{ secrets.ENV }}
        SERVER_CA: ${{ secrets.SERVER_CA }}
        CLIENT_CRT: ${{ secrets.CLIENT_CRT }}
        CLIENT_KEY: ${{ secrets.CLIENT_KEY }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    - name: Install modules and asset build
      run: npm i && npm run prod

    # TODO: Move extension mapping to redis cache
    # This is a temp fix.
    - name: Update extension mapping
      run: node ace extension:mapping:update

    - name: Deploy to App Engine
      run: gcloud app deploy --promote -q

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: bots-amp-comp-db
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: "App Engine Instance"
        SLACK_MESSAGE: "Deployed to https://rich-torus-221321.ue.r.appspot.com/ :rocket:\n\n*Message*\n${{ github.event.head_commit.message }}"

    - name: Remove older versions of App Engine
      run: |
          OLD_VERSIONS=$(
            gcloud app versions list \
            --service default \
            --sort-by '~version' \
            --format 'value(VERSION.ID)' \
             | sed 1,5d
          )
          [[ -n "$OLD_VERSIONS" ]] \
            && gcloud app versions delete --quiet $OLD_VERSIONS \
            || echo 'No old versions to delete. Less than 5 latest versions present.'

    - name: Cleanup
      if: ${{ always() }}
      uses: rtCamp/action-cleanup@master
